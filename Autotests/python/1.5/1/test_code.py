import subprocess
import pytest

FILENAME = "index.py"

# –í—Ö–æ–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –æ–∂–∏–¥–∞–µ–º—ã–µ –≤—ã–≤–æ–¥—ã
test_cases = [
    ("15\n", "–ß–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [10, 20]"),
    ("10\n", "–ß–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [10, 20]"),
    ("20\n", "–ß–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [10, 20]"),
    ("5\n", "–ß–∏—Å–ª–æ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞"),
    ("25\n", "–ß–∏—Å–ª–æ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞"),
    ("15.5\n", "–ß–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [10, 20]"),
    ("9.99\n", "–ß–∏—Å–ª–æ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞"),
    ("20.01\n", "–ß–∏—Å–ª–æ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
]

@pytest.mark.parametrize("input_value, expected_output", test_cases)
def test_number_range(input_value, expected_output):
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É
    process = subprocess.Popen(
        ['python3', FILENAME],
        stdin=subprocess.PIPE,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        text=True
    )
    stdout, stderr = process.communicate(input_value)

    # –†–∞–∑–±–∏–≤–∞–µ–º –≤—ã–≤–æ–¥ –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –∏ —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    actual_lines = [line.strip() for line in stdout.split("\n") if line.strip()]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–≤–æ–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
    assert len(actual_lines) > 0, (
        f"–ü–æ—Ö–æ–∂–µ, –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –≤—ã–≤–æ–¥–∏—Ç –Ω–∏—á–µ–≥–æ.\n"
        f"–ü–æ–ø—Ä–æ–±—É–π –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –ª–∏ print() –∏ input() –ø—Ä–∞–≤–∏–ª—å–Ω–æ."
    )

    # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –≤—ã–≤–æ–¥–∞
    actual = actual_lines[0]

    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –æ–∂–∏–¥–∞–µ–º—ã–º –≤—ã–≤–æ–¥–æ–º
    assert actual == expected_output, (
        f"–û—à–∏–±–∫–∞ –≤ –≤—ã–≤–æ–¥–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã!\n\n"
        f"–í–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ: {input_value.strip()}\n"
        f"–û–∂–∏–¥–∞–ª–æ—Å—å: {expected_output}\n"
        f"–ü–æ–ª—É—á–µ–Ω–æ: {actual}\n\n"
        f"üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ø—Ä–æ–≤–µ—Ä—å, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—à—å –¥–∏–∞–ø–∞–∑–æ–Ω –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å print()."
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—à–∏–±–æ–∫ –≤ stderr –Ω–µ—Ç
    assert stderr.strip() == "", f"–ü—Ä–æ–≥—Ä–∞–º–º–∞ –≤—ã–∑–≤–∞–ª–∞ –æ—à–∏–±–∫—É:\n{stderr}"
