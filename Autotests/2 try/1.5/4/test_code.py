import subprocess
import pytest

FILENAME = "index.py"

# –¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ –æ–∂–∏–¥–∞–µ–º—ã–π –≤—ã–≤–æ–¥
test_cases = [
    ("5\n7\n", "I —á–µ—Ç–≤–µ—Ä—Ç—å"),
    ("-3\n4\n", "II —á–µ—Ç–≤–µ—Ä—Ç—å"),
    ("-2\n-6\n", "III —á–µ—Ç–≤–µ—Ä—Ç—å"),
    ("8\n-5\n", "IV —á–µ—Ç–≤–µ—Ä—Ç—å"),
    ("0\n3\n", "–¢–æ—á–∫–∞ –Ω–∞ –æ—Å–∏"),
    ("4\n0\n", "–¢–æ—á–∫–∞ –Ω–∞ –æ—Å–∏"),
    ("0\n0\n", "–¢–æ—á–∫–∞ –Ω–∞ –æ—Å–∏"),
    ("1.5\n2.7\n", "I —á–µ—Ç–≤–µ—Ä—Ç—å"),
    ("-0.1\n-0.2\n", "III —á–µ—Ç–≤–µ—Ä—Ç—å")
]

@pytest.mark.parametrize("input_value, expected_output", test_cases)
def test_quadrant(input_value, expected_output):
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É
    process = subprocess.Popen(
        ['python3', FILENAME],
        stdin=subprocess.PIPE,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        text=True
    )
    stdout, stderr = process.communicate(input_value)

    # –†–∞–∑–±–∏–≤–∞–µ–º –≤—ã–≤–æ–¥ –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –∏ —É–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ
    actual_lines = [line.strip() for line in stdout.split("\n") if line.strip()]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–≤–æ–¥ –µ—Å—Ç—å
    assert len(actual_lines) > 0, (
        "–ü–æ—Ö–æ–∂–µ, –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –≤—ã–≤–æ–¥–∏—Ç –Ω–∏—á–µ–≥–æ.\n"
        "–ü—Ä–æ–≤–µ—Ä—å, –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –ª–∏ print() –∏ input() –ø—Ä–∞–≤–∏–ª—å–Ω–æ."
    )

    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –≤—ã–≤–æ–¥–∞
    actual = actual_lines[0]

    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –æ–∂–∏–¥–∞–µ–º—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    assert actual == expected_output, (
        f"–û—à–∏–±–∫–∞ –≤ –≤—ã–≤–æ–¥–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã!\n\n"
        f"–í–≤–µ–¥–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {input_value.replace(chr(10), ' / ')}\n"
        f"–û–∂–∏–¥–∞–ª–æ—Å—å: {expected_output}\n"
        f"–ü–æ–ª—É—á–µ–Ω–æ: {actual}\n\n"
        f"üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ø—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è –∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å–µ–π –∏ —á–µ—Ç–≤–µ—Ä—Ç–µ–π."
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—à–∏–±–æ–∫ –≤ stderr –Ω–µ—Ç
    assert stderr.strip() == "", f"–ü—Ä–æ–≥—Ä–∞–º–º–∞ –≤—ã–∑–≤–∞–ª–∞ –æ—à–∏–±–∫—É:\n{stderr}"
