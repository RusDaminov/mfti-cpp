import subprocess
import pytest

FILENAME = "index.py"

# –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –æ–∂–∏–¥–∞–µ–º—ã–π –≤—ã–≤–æ–¥
test_cases = [
    ("95\n", ["–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: A"]),
    ("100\n", ["–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: A"]),
    ("85\n", ["–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: B"]),
    ("72\n", ["–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: C"]),
    ("60\n", ["–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: D"]),
    ("58\n", ["–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: F"]),
    ("0\n", ["–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: F"]),
]

@pytest.mark.parametrize("input_value, expected_lines", test_cases)
def test_grades(input_value, expected_lines):
    process = subprocess.Popen(
        ["python3", FILENAME],
        stdin=subprocess.PIPE,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        text=True
    )
    stdout, stderr = process.communicate(input=input_value)

    # –ß–∏—Å—Ç–∏–º –≤—ã–≤–æ–¥
    actual_lines = [line.strip() for line in stdout.split("\n") if line.strip()]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
    assert len(actual_lines) == len(expected_lines), (
        f"‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!\n"
        f"üëâ –í–≤–µ–¥–µ–Ω–æ: {input_value.strip()}\n"
        f"‚úÖ –û–∂–∏–¥–∞–ª–æ—Å—å {len(expected_lines)} —Å—Ç—Ä–æ–∫: {expected_lines}\n"
        f"üõë –ü–æ–ª—É—á–µ–Ω–æ {len(actual_lines)} —Å—Ç—Ä–æ–∫: {actual_lines}\n\n"
        "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–æ–¥–∏—Ç—å —Ä–æ–≤–Ω–æ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É —Å –æ—Ü–µ–Ω–∫–æ–π."
    )

    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
    for i, (expected, actual) in enumerate(zip(expected_lines, actual_lines), start=1):
        assert actual == expected, (
            f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {i}!\n"
            f"üëâ –í–≤–µ–¥–µ–Ω–æ: {input_value.strip()}\n"
            f"‚úÖ –û–∂–∏–¥–∞–ª–æ—Å—å: {expected}\n"
            f"üõë –ü–æ–ª—É—á–µ–Ω–æ: {actual}\n\n"
            "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ø—Ä–æ–≤–µ—Ä—å —É—Å–ª–æ–≤–∏—è if-elif-else –∏ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É —Å—Ç—Ä–æ–∫–∏ –≤—ã–≤–æ–¥–∞."
        )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    assert stderr.strip() == "", f"–ü—Ä–æ–≥—Ä–∞–º–º–∞ –≤—ã–∑–≤–∞–ª–∞ –æ—à–∏–±–∫—É:\n{stderr}"
