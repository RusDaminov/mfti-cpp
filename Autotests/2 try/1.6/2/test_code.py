import subprocess
import pytest

FILENAME = "index.py"

# –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –æ–∂–∏–¥–∞–µ–º—ã–π –≤—ã–≤–æ–¥
test_cases = [
    ("500\n", "–í–∞—à–∞ —Å–∫–∏–¥–∫–∞: 0%"),
    ("999.99\n", "–í–∞—à–∞ —Å–∫–∏–¥–∫–∞: 0%"),
    ("1000\n", "–í–∞—à–∞ —Å–∫–∏–¥–∫–∞: 5%"),
    ("1500\n", "–í–∞—à–∞ —Å–∫–∏–¥–∫–∞: 5%"),
    ("5000\n", "–í–∞—à–∞ —Å–∫–∏–¥–∫–∞: 5%"),
    ("7000\n", "–í–∞—à–∞ —Å–∫–∏–¥–∫–∞: 10%"),
]

@pytest.mark.parametrize("input_value, expected_output", test_cases)
def test_discount(input_value, expected_output):
    process = subprocess.Popen(
        ["python3", FILENAME],
        stdin=subprocess.PIPE,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        text=True
    )
    stdout, stderr = process.communicate(input=input_value)

    # –ß–∏—Å—Ç–∏–º –≤—ã–≤–æ–¥ –æ—Ç –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫ –∏ –ø—Ä–æ–±–µ–ª–æ–≤
    actual_lines = [line.strip() for line in stdout.split("\n") if line.strip()]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞ —á—Ç–æ-—Ç–æ –≤—ã–≤–µ–ª–∞
    assert actual_lines, (
        "‚ùå –ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–≤–µ–ª–∞.\n"
        "–£–±–µ–¥–∏—Å—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å print()."
    )

    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É (–ø–æ —É—Å–ª–æ–≤–∏—é –∑–∞–¥–∞—á–∏ –Ω—É–∂–µ–Ω –æ–¥–∏–Ω –≤—ã–≤–æ–¥)
    actual = actual_lines[0]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    assert actual == expected_output, (
        f"‚ùå –û—à–∏–±–∫–∞ –≤ –≤—ã–≤–æ–¥–µ!\n\n"
        f"üëâ –í–≤–µ–¥–µ–Ω–æ: {input_value.strip()}\n"
        f"‚úÖ –û–∂–∏–¥–∞–ª–æ—Å—å: {expected_output}\n"
        f"üõë –ü–æ–ª—É—á–µ–Ω–æ: {actual}\n\n"
        "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ø—Ä–æ–≤–µ—Ä—å —É—Å–ª–æ–≤–∏—è if-elif-else, "
        "–∏ —É–±–µ–¥–∏—Å—å, —á—Ç–æ –≤—ã–≤–æ–¥ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ø—Ä–∏–º–µ—Ä–æ–º."
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ —É–ø–∞–ª–∞ —Å –æ—à–∏–±–∫–æ–π
    assert stderr.strip() == "", f"–ü—Ä–æ–≥—Ä–∞–º–º–∞ –≤—ã–∑–≤–∞–ª–∞ –æ—à–∏–±–∫—É:\n{stderr}"
